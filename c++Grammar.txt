1- typedef-name: identifier

Regra antiga
 namespace-name: original-name-space | namespace-alias
 original-name-space : identifier
 namespace-alias : identifier

2- namespace-name : identifier

3- class-name : identifier class-name1
   class-name1: < class-name2
   class-name2: template-argument-list > | > 

4- enum-name : identifier

5- template-name : identifier

6- hex-quad : hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit


Regra antiga
universal-character-name:
\u hex-quad
\U hex-quad hex-quad


7- universal-character-name : u hex-quad | U hex-quad hex-quad

8- preprocessing-token : header-name | identifier | pp-number | character-literal | string-literal | preprocessing-op-or-punc  | each non-white-space character that cannot be one of the above

9- token : identifier | keyword | literal | operator | punctuator

10- header-name: < h-char-sequence > | " q-char-sequence "

Regra antiga
h-char-sequence: h-char | h-char-sequence h-char

11- h-char-sequence: h-char h-char-sequence1
    h-char-sequence1 :  h-char h-char-sequence1 | vazio


12- h-char: any member of the source character set except new-line and >

Regra antiga
q-char-sequence: q-char | q-char-sequence q-char

13- q-char-sequence: q-char q-char-sequence1
     q-char-sequence1 : q-char q-char-sequence1 | vazio


14- q-char:any member of the source character set except new-line and "


Regra antiga
pp-number: digit | . digit | pp-number digit | pp-number nondigit | pp-number e sign | pp-number E sign | pp-number .

15- pp-number: digit pp-number1 | . digit pp-number1
    pp-number1 : digit pp-number1  | nondigit pp-number1 | e sign pp-number1 | E sign pp-number1 | .pp-number1 | vazio


Regra antiga
identifier: identifier-nondigit | identifier identifier-nondigit | identifier digit

16- identifier : identifier-nondigit identifier1
    identifier1 : identifier-nondigit  identifier1 | digit identifier1 | vazio


17 - identifier-nondigit: nondigit | universal-char-name | other implementation-defined characters   

18- nondigit: one of
a b c d e f g h i j k l m
n o p q r s t u v w x y z
A B C D E F G H I J K L M
N O P Q R S T U V W X Y Z _

19- digit: one of
0 1 2 3 4 5 6 7 8 9

20- keyword -> asm | do | if | return | try | auto | double | inline | short typedef | bool | dynamic_cast | int | signed | typeid | break | else | long | sizeof | typename | case | enum | mutable | static | union | catch | explicit |namespace | static_assert|  unsigned | char | export | new static_cast | using | class | extern | operator | struct | virtual | const |  false | private |switch | void |const_cast | float | protected  |template | volatile |continue  | for | public | this wchar_t | default | friend | register|  throw | while| delete | goto | reinterpret_cast |true

Regra antiga
preprocessing-op-or-punc: one of
{ } [ ] # ## ( )
<: :> <% %> %: %:%: ; : ...
new delete ? :: . .*
+ - * / % ^ & | ∼
! = < > += -= *= /= %=
^= &= |= << >> >>= <<= == !=
<= >= && || ++ -- , ->* ->
and and_eq bitand bitor compl not not_eq
or or_eq xor xor_eq

21- preprocessing-op-or-punc: {  | } | [ | ] | # preprocessing-op-or-punc1 | ( | ) | < preprocessing-op-or-punc2 |  :p reprocessing-op-or-punc4 | % preprocessing-op-or-punc5 | ; | . preprocessing-op-or-punc7 | new | delete | ? | + preprocessing-op-or-punc8 |  - preprocessing-op-or-punc9 | * preprocessing-op-or-punc11 | / preprocessing-op-or-punc11| ^preprocessing-op-or-punc11|  &preprocessing-op-or-punc12| ∼ |! preprocessing-op-or-punc11| = preprocessing-op-or-punc11 | >preprocessing-op-or-punc13 | | preprocessing-op-or-punc14  | ,  | and | and_eq bitand | bitor | compl | not | not_eq |or | or_eq | xor | xor_eq
 
preprocessing-op-or-punc1 : # | vazio
preprocessing-op-or-punc2 : : | < preprocessing-op-or-punc3 | % | = |vazio
preprocessing-op-or-punc3 : <= | vazio
preprocessing-op-or-punc4 :  > | : | vazio
preprocessing-op-or-punc5: > | :preprocessing-op-or-punc6 | = | vazio
preprocessing-op-or-punc6 : %: | vazio
preprocessing-op-or-punc7 :  * | .. | vazio
preprocessing-op-or-punc8 : = | + | vazio
preprocessing-op-or-punc9 : = | - | > preprocessing-op-or-punc10 | vazio
preprocessing-op-or-punc10: * | vazio
preprocessing-op-or-punc11 : = | vazio
preprocessing-op-or-punc12 : = | & | vazio
preprocessing-op-or-punc13 : > preprocessing-op-or-punc11 | = |vazio
preprocessing-op-or-punc14 : | | = | vazio

22- literal : integer-literal | character-literal | floating-literal | string-literal | boolean-literal

Regra antiga
integer-literal: decimal-literal integer-suffixopt | octal-literal integer-| hexadecimal-literal integer-suffixopt

23- integer-literal : decimal-literal integer-literal2 | 0 integer-literal1
    integer-literal1 : octal-literal integer-literal2 | hexadecimal-literal integer-literal2
    integer-literal2 : vazio | integer-suffix


Regra antiga
decimal-literal: nonzero-digit | decimal-literal digit

24- decimal-literal : nonzero-digit decimal-literal1
    decimal-literal1 : digit<decimal-literal1> | vazio



Regra antiga
25 - octal-literal: 0 | octal-literal octal-digit

octal-literal : octal-literal1
otcal-literal1->octal-digit octal-literal1 | vazio


Regra antiga
hexadecimal-literal: 0x hexadecimal-digit | 0X hexadecimal-digit | hexadecimal-literal hexadecimal-digit

26- hexadecimal-literal -> hexadecimal-digit1
hexadecimal-digit1 ->x hexadecimal-digit hexadecimal-literal2 | X hexadecimal-digit hexadecimal-literal2 | vazio
hexadecimal-literal2 -> hexadecimal-digit hexadecimal-literal2 | vazio

27- nonzero-digit: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

28- octal-digit: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7

29- hexadecimal-digit: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |a | b | c | d | e | f | A | B | C | D | E | F

Regra antiga
integer-suffix: unsigned-suffix long-suffixopt |unsigned-suffix long-long-suffixopt | long-suffix unsigned-suffixopt | long-long-suffix unsigned-suffixopt

unsigned-suffix: u | U

long-suffix: l | L

long-long-suffix: ll | LL

30- integer-suffix: unsigned-suffix integer-suffix2 | l integer-suffix2| L integer-suffix2 
     integer-suffix1 : long-suffix | long-long-suffix | vazio
     integer-suffix2 : unsigned-suffix | l integer-suffix3 | L integer-suffix3 | vazio
     integer-suffix3 : unsigned-suffix | vazio
    
Regra antiga
character-literal: ’ c-char-sequence ’ | L’ c-char-sequence ’

31- character-literal: ’ c-char-sequence ’

Regra antiga
c-char-sequence: c-char | c-char-sequence c-char

32- char-sequence: c-char char-sequence1
    char-sequence: c-char char-sequence1 | vazio

33- c-char: any member of the source character set except the single-quote ’, backslash \, or new-line character | \ c-char1 
      c-char1 : escape-sequence | universal-character-name

34- escape-sequence: simple-escape-sequence | octal-escape-sequence | hexadecimal-escape-sequence
     

35- simple-escape-sequence: one of
’ " ? \
a b f n r t v

36- octal-escape-sequence: octal-digit | octal-digit octal-digit | octal-digit octal-digit octal-digit
 

37- hexadecimal-escape-sequence: x hexadecimal-digit hexadecimal-escape1
    hexadecimal-escape-sequence1 : hexadecimal-digit hexadecimal-escape-sequence | vazio 

Regra antiga
floating-literal: fractional-constant exponent-partopt floating-suffixopt | digit-sequence exponent-part floating-suffixopt

38- floating-literal: digit-sequence floating-literal1 | floating-literal1
	floating-literal1 : fractional-constant floating-literal2 | exponent-part floating-literal3
	floating-literal2 : exponent-part floating-literal3 | floating-literal3 | vazio
	floating-literal3 : floating-suffix | vazio

Regra antiga
fractional-constant: digit-sequenceopt . digit-sequence | digit-sequence .

39- fractional-constant : fractional-constant1 | . digit-sequence | .

Regra antiga
exponent-part: e signopt digit-sequence | E signopt digit-sequence

40- exponent-part: e exponent-part1 | E exponent-part1
    exponent-part1 : digit-sequence | sign digit-sequence

41- sign : + | - 

Regra antiga
 digit-sequence: digit | digit-sequence digit 

42- digit-sequence: digit digit-sequence1
    digit-sequence1: digit digit-sequence | vazio

43- loating-suffix: one of
f l F L

44- string-literal ->"string-literal1
    string-literal1 -> s-char-sequence" | "

Regra antiga
s-char-sequence:
s-char
s-char-sequence s-char

45- s-char-sequence: s-char s-char-sequence1
    s-char-sequence1 : s-char s-char-sequence1 | vazio

46- s-char: any member of the source character set except the double-quote ", backslash \, or new-line character | \ s-char1
    s-char1 : escape-sequence | universal-character-name

47- boolean-literal: true | false

Basic concepts

48- translation-unit: declaration-seq | vazio


49- primary-expression: literal | this | ( expression ) | id-expression

50- id-expression: unqualified-id | qualified-id

Regra antiga
unqualified-id: identifier | operator-function-id | conversion-function-id| ∼ class-name |template-id

51- unqualified-id: identifier | operator unqualified-id1
	unqualified-id1: operator-function-id | conversion-function-id | ∼ class-name | template-id

Regra antiga
qualified-id: ::opt nested-name-specifier templateopt unqualified-id | :: identifier | :: operator-function-id | :: template-id

52- qualified-id: :: qualified-id1 | qualified-id2
    qualified-id1: qualified-id2 | identifier | operator-function-id | template-id
    qualified-id2: nested-name-specifier qualified-id3
    qualified-id3: template unqualified-id | unqualified-id

Regra antiga
nested-name-specifier: type-name :: | namespace-name :: | nested-name-specifier | identifier :: | nested-name-specifier templateopt template-id ::

53-  nested-name-specifier: identifier nested-name-specifier1
     nested-name-specifier1: type-name1  :: nested-name-specifier2 | :: nested-name-specifier2
     nested-name-specifier2: identifier nested-name-specifier3 | template identifier nested-name-specifier5
     nested-name-specifier3: :: | < nested-name-specifier4
     nested-name-specifier4:  template-argument-list > :: | > ::
     nested-name-specifier5: < nested-name-specifier4

Regra antiga

postfix-expression:primary-expression |
postfix-expression [ expression ] |
postfix-expression ( expression-listopt ) |
simple-type-specifier ( expression-listopt ) |
typename-specifier ( expression-listopt ) |
postfix-expression . templateopt id-expression |
postfix-expression -> templateopt id-expression |
postfix-expression . pseudo-destructor-name |
postfix-expression -> pseudo-destructor-name |
postfix-expression ++ |
postfix-expression -- |
dynamic_cast < type-id > ( expression ) |
static_cast < type-id > ( expression ) |
reinterpret_cast < type-id > ( expression ) |
const_cast < type-id > ( expression ) |
typeid ( expression ) |
typeid ( type-id )

54- postfix-expression: primary-expression postfix-expression1 | simple-type-specifier ( postfix-expression2 | typename-specifier ( postfix-expression2 | dynamic_cast <type-id> (expression) postfix-expression1 | static_cast <type-id> ( expression )postfix-expression1  | reinterpret_cast <type-id> ( expression )postfix-expression1  | const_cast <type-id> ( expression ) postfix-expression1 | typeid ( postfix-expression3
postfix-expression1: [ expression ] postfix-expression1 | ( postfix-expression4 | -- postfix-expression1 | ++ postfix-expression1 | -> postfix-expression5 | . postfix-expression6 | vazio
postfix-expression2: ) postfix-expression1 | expression-list )postfix-expression1 
postfix-expression3: expression ) postfix-expression1  | type-id ) postfix-expression1 
postfix-expression4: expression-list) postfix-expression1 | ) postfix-expression1 
postfix-expression5: pseudo-destructor-name postfix-expression1  | id-expression postfix-expression1  | template id expression postfix-expression1

55- expression-list: assignment-expression expression-list1
    expression-list1: , assignment-expression expression-list1 | vazio

Regra antiga
pseudo-destructor-name: ::opt nested-name-specifieropt type-name | :: ∼ type-name |::opt nested-name-specifier template template-id | :: ∼ type-name |::opt nested-name-specifieropt ∼ type-name

56- pseudo-destructor-name: :: pseudo-destructor-name1 | pseudo-desturctor-name1
    pseudo-desturctor-name1: nested-name-specifier pseudo-desturctor-name2 | pseudo-desturctor-name2
   pseudo-desturctor-name2: type-name :: ~type-name | ~ type-name | template template-id :: ~ type-name

Regra antiga
unary-expression: postfix-expression | ++ cast-expression |-- cast-expression | unary-operator cast-expression | sizeof unary-expression |sizeof ( type-id ) | new-expression | delete-expression
57- unary-expression: postfix-expression | ++ cast-expression | -- cast-expression | unary-operator cast-expression |sizeof unary-expression1 | new-expression |delete-expression
unary-expression1: unary-expression | (type-id)


58- unary-operator: * | & | + | - | ! | ~

Regra antiga
new-expression: ::opt new new-placementopt new-type-id new-initializeropt | ::opt new new-placementopt ( type-id ) new-initializeropt

59- new-expression: :: new new-expression1 | new new-expression1
    new-expression1 : new-placement new-expression2 | new-expression2
    new-expression2: new-type-id new-expression3 | ( type-id ) new-expression3
    new-expression3: new-initializer | vazio

60- new-placement: ( expression-list )

Regra antiga
new-type-id: type-specifier-seq new-declaratoropt

61- new-type-id: type-specifier-seq new-type-id1
    new-type-id1: new-declarator | vazio

Regra antiga
new-declarator: ptr-operator new-declaratoropt | direct-new-declarator

62- new-declarator: ptr-operator new-declarator1 | direct-new-declarator
    new-declarator1: new-declarator | vazio

Regra antiga
direct-new-declarator: [ expression ] | direct-new-declarator [ constant-expression ]
63- direct-new-declarator: [ expression ] direct-new-declarator1
    direct-new-declarator1: [ constant-expression ]direct-new-declarator1 | vazio


Regra antiga
new-initializer: ( expression-listopt )

64- new-initializer: ( new-initializer1
    new-initializer: expression-list ) | )


Regra antiga
delete-expression: ::opt delete cast-expression | ::opt delete [ ] cast-expression

65- delete-expression: :: delete-expression1 | delete-expression1
    delete-expression1: delete delete-expression2
    delete-expression2: cast-expression | [ ] cast-expression

66- cast-expression: unary-operator | ( type-id ) cast-expression


Regra antiga
pm-expression: cast-expression | pm-expression .* cast-expression |pm-expression ->* cast-expression

67- pm-expression: cast-expression pm-expression1
    pm-expression1: .* cast-expression pm-expression1 | ->* cast-expression pm-expression1 | vazio

Regra antiga
multiplicative-expression: pm-expression | multiplicative-expression * pm-expression | multiplicative-expression / pm-expression | multiplicative-expression % pm-expression

68- multiplicative-expression: pm-expression multiplicative-expression1
    multiplicative-expression1: * pm-expression multiplicative-expression1 | / pm-expression multiplicative-expression1 | % pm-expression multiplicative-expression1 | vazio

Regra antiga
additive-expression: multiplicative-expression | additive-expression + multiplicative-expression | additive-expression - multiplicative-expression

69- additive-expression: multiplicative-expression additive-expression1
    additive-expression1: + multiplicative-expression additive-expression1 | - multiplicative-expression additive-expression1 | vazio

Regra antiga
shift-expression: additive-expression | shift-expression << additive-expression | shift-expression >> additive-expression

70- shift-expression: additive-expression shift-expression1
    shift-expression1: << additive-expression shift-expression1 | >> additive-expression shift-expression1 | vazio


Regra antiga
relational-expression: shift-expression | relational-expression < shift-expression | relational-expression > shift-expression | relational-expression <= shift-expression | relational-expression >= shift-expression

71- relational-expression: shift-expression relational-expression1
    relational-expression1: < relational-expression2 shift-expression relational-expression1 | > relational-expression3  | vazio
    relational-expression2: shift-expression relational-expression1 | = shift-expression relational-expression1
    relational-expression3: shift-expression relational-expression1 | = shift-expression relational-expression1

Regra antiga
equality-expression: relational-expression | equality-expression == relational-expression | equality-expression != relational-expression

72- equality-expression: relational-expression equality-expression1
    equality-expression1: == relational-expression equality-expression1 | != relational-expression equality-expression1 | vazio

Regra antiga
and-expression:equality-expression | and-expression & equality-expression

73- and-expression: equality and-expression1
    and-expression1: & equality-expression and-expression1 | vazio


Regra antiga
exclusive-or-expression: and-expression | exclusive-or-expression ^ and-expression

74- exclusive-or-expression: and-expression exclusive-or-expression1
    exclusive-or-expression1: ^ and-expression exclusive-or-expression1 | vazio


Regra antiga
inclusive-or-expression: exclusive-or-expression | inclusive-or-expression | exclusive-or-expression

75- inclusive-or-expression: exclusive-or-expression inclusive-or-expression1
    inclusive-or-expression1: | exclusive-or-expression inclusive-or-expression1 | vazio


Regra antiga
logical-and-expression: inclusive-or-expression | logical-and-expression && inclusive-or-expression

76- logical-and-expression: inclusive-or-expression logical-and-expression1
    logical-and-expression1: && inclusive-or-expression logical-and-expression1 | vazio


Regra antiga
logical-or-expression:logical-and-expression | logical-or-expression || logical-and-expression

77- logical-or-expression: logical-and-expression logical-or-expression1
    logical-or-expression1: || logical-and-expression logical-or-expression1 | vazio

Regra antiga
conditional-expression:logical-or-expression | logical-or-expression ? expression : assignment-expression


78- conditional-expression: logical-or-expression conditional-expression1
    conditional-expression: ? expression : assignment-expressio | vazio
   

79- assignment-expression: conditional-expression | logical-or-expression assignment-operator assignment-expression | throw-expression

80- assignment-operator: one of
= *= /= %= += -= >>= <<= &= ^= |=

Regra antiga
expression: assignment-expression | expression , assignment-expression

81- expression: assignment-expression expression1
    expression1: , assignment-expressio expression1 | vazio

82- constant-expression: conditional-expression

83- statement: labeled-statement | expression-statement |compound-statement | selection-statement |iteration-statement | jump-statement | declaration-statement | try-block

84- labeled-statement: identifier : statement | case constant-expression : statement | default : statement

Regra antiga
expression-statement: expressionopt ;

85- expression-statement: expression ; | ;


Regra antiga
compound-statement: { statement-seqopt }

86- compound-statement: { compound-statement1
    compound-statement1: } | statement-seq }

Regra antiga
statement-seq:statement | statement-seq statement

87- statement-seq: statement statement-seq1
    statement-seq: statement statement-sed1 | vazio


Regra antiga
selection-statement: if ( condition ) statement | if ( condition ) statement else statement | switch ( condition ) statement

88- selection-statement: if ( condition ) statement selection-statement1 | switch (condition) statement
    selection-statement: else statement | vazio


89- condition: expression | type-specifier-seq declarator = assignment-expression


Regra antiga
iteration-statement: while ( condition ) statement | do statement while ( expression ) ; | for ( for-init-statement conditionopt ; expressionopt ) statement

90- iteration-statement: while ( condition ) statement | do statement while ( expression ) ; | for ( iteration-statement iteration-statement1
    iteration-statement1: condition ; iteration-statement2 | ; iteration-statement2
    iteration-statement2: ) statement | expression ) statement


91- for-init-statement: expression-statement | simple-declaration


Regra antiga
jump-statement: break ; | continue ; | return expressionopt ; | goto identifier ;

92- jump-statement: break ; | continue ; | goto identifier ; | return jump-statement1
    jump-statement1: ; | expression ;


93- declaration-statement: block-declaration

Regra antiga
declaration-seq: declaration | declaration-seq declaration

94- declaration-seq: declaration declaration-seq1
    declaration-seq1 : declaration declaration-seq1 | vazio


95- declaration: block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition

Regra antiga - ambiguidade indireta
declaration: block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition

96- declaration: decl-specifier-seq declaration1 | declaration1 |template declaration2| declaration2 |linkage-specification |namespace-definition
declaration1: block-declaration | function-definition
declaration2: explicit-instantiation | explicit-specialization | < template-parameter-list > declaration

Regra antiga
block-declaration: simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive | static_assert-declaration

97- block-declaration: simple-declaration | asm-definition | namespace-alias-definition |using block-declaration1 | static_assert-declaration
    block-declaration1: using-declaration | using-directive

Regra antiga
simple-declaration: decl-specifier-seqopt init-declarator-listopt ;

98- simple-declaration: init-declarator-list ; | ;
    simple-declaration1: ; | init-declarator-list ; 

99- static_assert-declaration: static_assert ( constant-expression , string-literal ) ;


100- decl-specifier: storage-class-specifier | type-specifier | function-specifier | friend | typedef


Regra antiga
decl-specifier-seq: decl-specifier-seqopt decl-specifier

101- decl-specifier-seq: decl-specifier decl-specifier-seq1
     decl-specifier-seq1: decl-specifier dec-specifier-seq1 | vazio


102- storage-class-specifier:auto | register | static | extern | mutable


103- function-specifier: inline | virtual | explicit

104- typedef-name: identifier

105- type-specifier: simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | typename-specifier | cv-qualifier

Regra antiga
simple-type-specifier: ::opt nested-name-specifieropt type-name | ::opt nested-name-specifier template template-id | char | wchar_t | bool | short | int | long | signed | unsigned | float | double | void

106- simple-type-specifier: :: simple-type-specifier1 | nested-name-specifier simple-type-specifier2
     simple-type-specifier1: type-name | nested-name-specifier simple-type-specifier2
     simple-type-specifier2: type-name | template template-id


Regra antiga
type-name: class-name | enum-name | typedef-name

107- type-name: identifier type-name1
     type-name1: < type-name2 | vazio
     type-name2: template-argument-list > |  >


Regra antiga
elaborated-type-specifier: class-key ::opt nested-name-specifieropt identifier | class-key ::opt nested-name-specifieropt templateopt template-id | enum ::opt nested-name-specifieropt identifier

108- elaborated-type-specifier: class-key elaborated-type-specifier1 | enum elaborated-type-specifier1
     elaborated-type-specifier1: :: elaborated-type-specifier2 | elaborated-type-specifier2
     elaborated-type-specifier2: nested-name-specifier elaborated-type-specifier3 | elaborated-type-specifier3
     elaborated-type-specifier3: identifier | template template-id | template-id


109- enum-name: identifier

Regra antiga
enum-specifier: enum identifieropt{ enumerator-listopt}

110- enum-specifier: enum enum-specifier1
     enum-specifier1: identifier { enum-specifier2 | { enum-specifier2
     enum-specifier2: enumerator-list } | }

Regra antiga
enumerator-list: enumerator-definition | enumerator-list , enumerator-definition

111- enumerator-list: enumerator-definition enumerator-list1
     enumerator-list1: , enumerator-definition enumerator-list1 | vazio

Regra antiga
enumerator-definition: enumerator | enumerator = constant-expression

112- enumerator-definition: enumerator enumerator-definition1
     enumerator-definition1: = constant-expression | vazio

113- enumerator: identifier

Regra antiga
namespace-name: original-namespace-name | namespace-alias

114- namespace-name: identifier

115- original-namespace-name: identifier

Regra antiga
namespace-definition: named-namespace-definition | unnamed-namespace-definition

116- namespace-definition: namespace namespace-definition1
namespace-definition1: identifier { namespace-body } | original-namespace-name { namespace-body }| { namespace-body }

117- original-namespace-definition: namespace identifier { namespace-body }

118- namespace-body: declaration-seqopt | vazio

119- namespace-alias: identifier

120- namespace-alias-definition: namespace identifier = qualified-namespace-specifier ;

Regra antiga
qualified-namespace-specifier: ::opt nested-name-specifieropt namespace-name

121- qualified-namespace-specifier: :: nested-name-specifieropt namespace-name | nested-name-specifieropt namespace-name

Regra antiga
using-declaration: using typenameopt ::opt nested-name-specifier unqualified-id ; | using :: unqualified-id ;


122- using-declaration: using using-declaration1
     using-declaration1: typename using-declaration2 | using-declaration2 | :: using-declaration3
     using-declaration2:  :: nested-name-specifier unqualified-id ;
 | nested-name-specifier unqualified-id ;
     using-declaration3: unqualified-id ;


Regra antiga
using-directive: using namespace ::opt nested-name-specifieropt namespace-name ;

123- using-directive: using namespace using-directive1
     using-directive1: using-directive2 | :: using-directive2
     using-directive2: nested-name-specifier namespace-name ; | namespace-name ;

124- asm-definition: asm ( string-literal ) ;

Regra antiga
linkage-specification:extern string-literal { declaration-seqopt } | extern string-literal declaration

125- linkage-specification: extern string-literal linkage-specification1
     linkage-specification1: declaration | { linkage-specification2
     linkage-specification2: declaration-seq } | }

Regra antiga
init-declarator-list: init-declarator | init-declarator-list , init-declarator

126- init-declarator-list: init-declarator init-declarator-list1
     init-declarator-list1: , init-declarator init-declarator-list1 | vazio

Regra antiga
init-declarator: declarator initializeropt

127- init-declarator:declarator
     init-declarator1: initializer | vazio

128- declarator: direct-declarator | ptr-operator declarator

Regra antiga
direct-declarator: declarator-id | direct-declarator ( parameter-declaration-clause ) cv-qualifier-seqopt exception-specificationopt | direct-declarator [ constant-expressionopt ] | ( declarator )

129- direct-declarator: declarator-id direct-declarator1 | ( declarator ) direct-declarator1
     direct-declarator1: ( parameter-declaration-clause )direct-declarator2  | [ direct-declarator4 | vazio
     direct-declarator2: cv-qualifier-seq direct-declarator3 | direct-declarator3
     direct-declarator3: exception-specification direct-declarator1 | direct-declarator1
     direct-declarator4: constant-expression ] direct-declarator1 | ] direct-declarator1


Regra antiga
ptr-operator: * cv-qualifier-seqopt | & | ::opt nested-name-specifier * cv-qualifier-seqopt

130- ptr-operator:  * cv-qualifier-seqopt | & | :: nested-name-specifier * ptr-operator1 | nested-name-specifier * ptr-operator1
     ptr-operator1: cv-qualifier-seq | vazio

Regra antiga
cv-qualifier-seq: cv-qualifier cv-qualifier-seqopt

131- cv-qualifier-seq: cv-qualifier cv-qualifier-seq1
     cv-qualifier-seq1: cv-qualifier-seq | vazio

132-cv-qualifier: const | volatil

Regra antiga
declarator-id: id-expression | ::opt nested-name-specifieropt class-name

133- declarator-id: id-expression | :: declarator-id1 | nested-name-specifier class-name | class-name
     declarator-id1: nested-name-specifier class-name | class-name
  
Regra antiga
type-id: type-specifier-seq abstract-declaratoropt 

134- type-id: type-specifier-seq  type-id1
     type-id1: abstract-declarator | vazio


Regra antiga
type-specifier-seq: type-specifier type-specifier-seqopt

135- type-specifier-seq:type-specifier type-specifier-seq1
     type-specifier-seq1: type-specifier-seq | vazio


Regra antiga
abstract-declarator: ptr-operator abstract-declaratoropt | direct-abstract-declarator

136- abstract-declarator: ptr-operator abstract-declarator1 | direct-abstract-declarator
     abstract-declarator1: abstract-declarator | vazio


Regra antiga
direct-abstract-declarator: direct-abstract-declaratoropt | ( parameter-declaration-clause ) cv-qualifier-seqopt exception-specificationopt | direct-abstract-declaratoropt[ constant-expressionopt ] | ( abstract-declarator )


137- direct-abstract-declarator: ( abstract-declarator ) direct-abstract-declarator1 | direct-abstract-declarator1 | ( parameter-declaration-clause ) direct-abstract-declarator2 | vazio
    direct-abstract-declarator1: [ direct-abstract-declarator4
    direct-abstract-declarator2: cv-qualifier-seq direct-abstract-declarator3 | exception-specification direct-abstract-declarator1| direct-abstract-declarator1
    direct-abstract-declarator3: exception-specification direct-abstract-declarator1 | direct-abstract-declarator1
    direct-abstract-declarator4: constant-expression ] direct-abstract-declarator1 | ] direct-abstract-declarator1

Regra antiga
parameter-declaration-clause: parameter-declaration-listopt ...opt | parameter-declaration-list , ...


138- parameter-declaration-clause: parameter-declaration-list parameter-declaration-clause1 | ... | vazio
     parameter-declaration-clause1:  , ... | ... | vazio

Regra antiga
parameter-declaration-list: parameter-declaration | parameter-declaration-list , parameter-declaration

139- parameter-declaration-list: parameter-declaration parameter-declaration-list1
     parameter-declaration-list1: , parameter-declaration parameter-declaration-list1 | vazio


Regra antiga
parameter-declaration: decl-specifier-seq declarator | decl-specifier-seq declarator = assignment-expression | decl-specifier-seq abstract-declaratoropt | decl-specifier-seq abstract-declaratoropt = assignment-expression

140- parameter-declaration: decl-specifier-seq parameter-declaration1
     parameter-declaration1: declarator   parameter-declaration2 | abstract-declarator  parameter-declaration3 |  parameter-declaration3 | vazio
     parameter-declaration2: = assignment-expression | vazio
      parameter-declaration3: = assignment-expression


Regra antiga

function-definition: decl-specifier-seqopt declarator ctor-initializeropt function-body | decl-specifier-seqopt declarator function-try-block

141- function-definition: decl-specifier-seq declarator function-definition1 | declarator function-definition1
     function-definition1: function-try-block | ctor-initializer function-body | function-body


142- function-body: compound-statement

143- initializer: = initializer-clause | ( expression-list )

Regra antiga
initializer-clause: assignment-expression | { initializer-list ,opt } | { }

144- initializer-clause: assignment-expression | { initializer-clause1
     initializer-clause1: initializer-list initializer-clause2 | }
     initializer-clause2: , } | } 


Regra antiga
initializer-list:
initializer-clause
initializer-list , initializer-clause

145-initializer-list: initializer-clause initializer-list1
    initializer-list1: , initializer-clause | vazio


Regra antiga
class-name: identifier|


146- class-name: identifier  class-name1
      class-name1: < class-name2 | vazio
      class-name2: template-argument-list > | >


Regra antiga
class-specifier: class-head { member-specificationopt }

147- class-specifier: class-head { class-specifier1
     class-specifier1: member-specification } | }

Regra antiga
class-head: class-key identifieropt base-clauseopt | class-key nested-name-specifier identifier base-clauseopt | class-key nested-name-specifieropt template-id base-clauseopt

148- class-head: class-key  class-head1
     class-head1: identifier class-head2 | class-head3 
     class-head2: base-clause | vazio | nested-name-specifier1 class-head4 | class-head5
     class-head3: base-clause | vazio
     class-head4: base-clause | vazio | < class-head5 
     class-head5: template-argument-list > class-head3 | > class-head3


149- class-key: class | struct | union


Regra antiga
member-specification: member-declaration member-specificationopt | access-specifier : member-specificationopt

150- member-specification:  member-declaration member-specification1 | access-specifier : member-specification1 
member-specificartion1: member-specification | vazio



Regra antiga
member-declaration: decl-specifier-seqopt member-declarator-listopt ; | function-definition ;opt | ::opt nested-name-specifier templateopt | unqualified-id ; |using-declaration | static_assert-declaration | template-declaration

151- member-declaration: decl-specifier-seq member-declaration4 | member-declaration1 | :: nested-name-specifier member-declaration3 | nested-name-specifier member-declaration3 | using-declaration | static_assert_declaration | template declaration

member-declaration4: member-declaration1 | declarator function1 member-declaration2 
member-declaration1: member-declarator-list ; | ;
member-declaration2: ; | vazio
member-declaration3: template | vazio


Regra antiga
member-declarator-list: member-declarator | member-declarator-list , member-declarator

152- member-declarator-list: member-declarator  member-declarator-list1
     member-declarator-list1: , member-declarator member-declarator-list1 | vazio


Regra antiga
member-declarator: declarator pure-specifieropt | declarator constant-initializeropt | identifieropt : constant-expression

153- member-declarator: declarator member-declarator1 | identifier member-declarator2 | member-declarator2
     member-declarator1: pure-specifier | constant-initializer | vazio
     member-declarator2:  : constant-expression

154- pure-specifier: = 0

155- constant-initializer: = constant-expression


156- base-clause: : base-specifier-list

Regra antiga 
base-specifier-list: base-specifier | base-specifier-list , base-specifier

157- base-specifier-list: base-specifier base-specifier-list1
     base-specifier-list1: , base-specifier base-specifier-list1 | vazio

Regra antiga
base-specifier: ::opt nested-name-specifieropt class-name | virtual access-specifieropt ::opt nested-name-specifieropt class-name | access-specifier virtualopt ::opt nested-name-specifieropt class-name

158- base-specifier: :: base-specifier1 | base-specifier1 | virtual base-specifier2 | access-specifier base-specifier5
     base-specifier1: nested-name-specifier class-name | class-name
     base-specifier2: access-specifier base-specifier3 | base-specifier3
     base-specifier3:  :: base-specifier4 | base-specifier4
     base-specifier4: nested-name-specifier class-name | class-name
     base-specifier5: virtual base-specifier6 | base-specifier6
     base-specifier6: :: base-specifier4 | base-specifier4

159- access-specifier: private | protected | public

160- conversion-function-id: operator conversion-type-id

Regra antiga
conversion-type-id: type-specifier-seq conversion-declaratoropt

161- conversion-type-id: type-specifier-seq  conversion-type-id1
     conversion-type-id1: conversion-declarator | vazio

Regra antiga
conversion-declarator: ptr-operator conversion-declaratoropt
162- conversion-declarator: ptr-operator conversion-declarator1
     conversion-declarator1: conversion-declarator | vazio

163- ctor-initializer: : mem-initializer-list

Regra antiga
mem-initializer-list: mem-initializer | mem-initializer , mem-initializer-list

164- mem-initializer-list: mem-initializer mem-initializer-list1
     mem-initializer-list1: , mem-initializer mem-initializer-list1 | vazio

Regra antiga
mem-initializer: mem-initializer-id ( expression-listopt )

165- mem-initializer: mem-initializer-id ( mem-initializer1
     mem-initializer1: expression-list ) | ) 


Regra antiga
mem-initializer-id: ::opt nested-name-specifieropt class-name | identifier

166- mem-initializer-id: identifier mem-initializer-id2 | :: mem-initializer-id1 | class-name
     mem-initializer-id1: nested-name-specifier class-name | class-name
     mem-initializer-id2: nested-name-specifier1 class-name | vazio

Regra antiga
operator-function-id: operator operator |operator operator < template-argument-listopt >

167- operator-function-id: operator operator operator-function-id1
     operator-function-id1: < operator-function-id2 | vazio
     operator-function-id2: template-argument-list > | > 

Regra antiga
template-declaration: exportopt template < template-parameter-list > declaration

168-  template-declaration: export template < template-parameter-list> | template < template-parameter-list>

Regra antiga
template-parameter-list:template-parameter | template-parameter-list , template-parameter

169- template-parameter-list: template-parameter template-parameter-list1 
     template-parameter-list1: , template-parameter template-parameter-list1 | vazio

170- template-parameter: type-parameter | parameter-declaration


Regra antiga
type-parameter: class identifieropt | class identifieropt = type-id | typename identifieropt | typename identifieropt = type-id | template <template-parameter-list > class identifieropt | template < template-parameter-list > class identifieropt = id-expression

171- type-parameter: class type-parameter1 | typename type-parameter3 | template type-parameter4
     type-parameter1: identifier type-parameter2 | type-parameter2 | vazio
     type-parameter2: = type-id | vazio
     type-parameter3: identifier type-parameter2 | type-parameter2 
     type-parameter4: < template-parameter-list > class type-parameter5
     type-parameter5: identifier type-parameter6 | vazio | = id-expression
     type-parameter6: = id-expression | vazio


Regra antiga
template-id: template-name < template-argument-listopt >

172- template-id: template-name < template-id1
     template-id1: template-argument-list > | >

173- template-name: identifier

Regra antiga
template-argument-list: template-argument | template-argument-list , template-argument

174- template-argument-list: template-argument  template-argument-list1
      template-argument-list1:  template-argument  template-argument-list1 | vazio


175- template-argument: assignment-expression | type-id | id-expression

Regra antiga
typename-specifier: typename ::opt nested-name-specifier identifier | typename ::opt nested-name-specifier templateopt template-id

176-  typename-specifier: typename typename-specifier1
      typename-specifier1: :: nested-name-specifier typename-specifier2 | nested-name-specifier typename-specifier2
      typename-specifier2: identifier typename-specifier3 | template typename-specifier4
      typename-specifier3: template-id1 | vazio
      typename-specifier4: template-id

177- explicit-instantiation: template declaration

178- explicit-specialization: template < > declaration

179- try-block: try compound-statement handler-seq


Regra antiga
function-try-block:
try ctor-initializeropt function-body handler-seq

180- function-try-block: try function-try-block1
     function-try-block1: ctor-initializer function-body handler-seq | function-body handler-seq


Regra antiga

181- handler-seq: handler handler-seq | vazio

182- handler: catch ( exception-declaration ) compound-statement

Regra antiga
exception-declaration: type-specifier-seq declarator | type-specifier-seq abstract-declarator | type-specifier-seq | ...

183- exception-declaration: type-specifier-seq exception-declaration1 | ...
     exception-declaration1: declarator | abstract-declarator | vazio

Regra antiga
throw-expression: throw assignment-expressionopt

184- throw-expression: throw throw-expression1
     throw-expression1: assignment-expression | vazio

Regra antiga
exception-specification: throw ( type-id-listopt )

185- exception-specification: throw ( exception-specification1
     exception-specification1: type-id-list ) | )

Regra antiga
type-id-list: type-id | type-id-list , type-id

186- type-id-list: type-id type-id-list1
     type-id-list1: , type-id type-id-list1 | type-id-list1

